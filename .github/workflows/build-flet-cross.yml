name: build-flet-cross

on:
  push:
    tags:
      - "v*"

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - name: "Create Release"
        run: gh release create ${{github.ref_name}} --draft --verify-tag --notes "Release ${{github.ref_name}}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  cross-build:
    needs: create-release
    strategy:
      matrix:
        include:
          - runs-on: ubuntu-latest
            flet-name: R_ScrapingRank_linux
            assets-name: ":assets"
            assets_binary-name: ":assets_binary"
            binary-name: R_ScrapingRank_linux.tar.gz
          - runs-on: macos-latest
            flet-name: R_ScrapingRank_macos
            assets-name: ":assets"
            assets_binary-name: ":assets_binary"
            binary-name: R_ScrapingRank_macos.tar.gz
          - runs-on: windows-latest
            flet-name: R_ScrapingRank_windows
            assets-name: ";assets"
            assets_binary-name: ";assets_binary"
            binary-name: R_ScrapingRank_windows.zip
    runs-on: ${{ matrix.runs-on }}
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: "pip"
      - run: pip install -r requirements.txt
      - name: "Build Flet App"
        run: |
          if [ "${{ matrix.runs-on }}" == "windows-latest" ]; then
            flet pack main.py --name ${{ matrix.flet-name }} --icon assets_binary/icon.png --add-data "assets${{ matrix.assets-name }}" --add-binary "assets_binary${{ matrix.assets_binary-name }}" --onedir
          else
            flet pack main.py --name ${{ matrix.flet-name }} --icon assets_binary/icon.png --add-data "assets${{ matrix.assets-name }}" --add-binary "assets_binary${{ matrix.assets_binary-name }}"
          fi
        shell: bash
      - name: "Linux/MacOS compress"
        if: runner.os != 'Windows'
        run: tar zcvf ${{matrix.binary-name}} dist
      - name: "Windows compress"
        if: runner.os == 'Windows'
        run: powershell Compress-Archive -Path dist -DestinationPath ${{matrix.binary-name}}
      - name: "Upload Release"
        run: gh release upload ${{github.ref_name}} ${{matrix.binary-name}}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}